///////////////////////////////////////////////////////////
//  ConnectivityNode.cs
//  Implementation of the Class ConnectivityNode
//  Generated by Enterprise Architect
//  Created on:      21-Sep-2016 12:14:09 PM
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using CIM.IEC61970.Base.Core;
using Milica_Tiodorovic_e3582013_rva;
using System.ComponentModel;

namespace CIM.IEC61970.Base.Core {
    /// <summary>
    /// Connectivity nodes are points where terminals of AC conducting equipment are
    /// connected together with zero impedance.
    /// </summary>
    /// 
   [Serializable]
    public class ConnectivityNode : IdentifiedObject,IPrototype, INotifyPropertyChanged {

        public CIM.IEC61970.Base.Core.BaseVoltage m_BaseVoltage { get; set; }

        public double x { get; set; } //stare vrednosti
        public double y { get; set; }

        public double x1;
        public double y1;
        public double X
        {
            get{ return x1; }
            set{ x1 = value; NotifyPropertyChanged("X"); }
        }
        public double Y
        {
            get { return y1; }
            set { y1 = value; NotifyPropertyChanged("Y"); }
        }
       
     
        /// <summary>
        /// Container of this connectivity node.
        // </summary>
        public CIM.IEC61970.Base.Core.ConnectivityNodeContainer ConnectivityNodeContainer;

        public ConnectivityNode(){
            m_BaseVoltage = new BaseVoltage();
        }

		~ConnectivityNode(){

		}

        public event PropertyChangedEventHandler PropertyChanged;

        private void NotifyPropertyChanged(string v)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(v));
            }
        }


        public object Clone()
        {
            ConnectivityNode cvor = new ConnectivityNode();

            cvor.aliasName =  this.aliasName;
            cvor.mRID = this.mRID;
            cvor.description =this.description;
            cvor.name = this.name;
            cvor.m_BaseVoltage = this.m_BaseVoltage;
            cvor.m_BaseVoltage.ConductingEquipment = new List<ConductingEquipment>(this.m_BaseVoltage.ConductingEquipment);
            cvor.x = -1;
            cvor.y = -1;
            for (int i = 0; i < Singleton.Instance().Substations.Count; i++)
            {
                for (int j = 0; j < Singleton.Instance().Substations[i].connectivityNodes.Count; j++)
                {
                    if (Singleton.Instance().Substations[i].connectivityNodes[j].mRID.Equals(this.mRID))
                    {
                        Singleton.Instance().Substations[i].connectivityNodes.Add(cvor);
                        break;
                    }
                }
            }

            return cvor;

        }

        public override string ToString()
        {
            return "id: " + mRID + ", name: " + name;
        }
    }//end ConnectivityNode

}//end namespace Core